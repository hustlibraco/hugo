<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Whisper </title>
    <link>http://blog.hustlibraco.com/tags/linux/</link>
    <language>en-us</language>
    <author>Libraco</author>
    <rights>(C) 2015</rights>
    <updated>2015-12-03 00:00:00 &#43;0000 UTC</updated>

    
      
        <item>
          <title>Centos使用Yum安装配置Mongodb</title>
          <link>http://blog.hustlibraco.com/2015/12/03/centos%E4%BD%BF%E7%94%A8yum%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEmongodb/</link>
          <pubDate>Thu, 03 Dec 2015 00:00:00 UTC</pubDate>
          <author>Libraco</author>
          <guid>http://blog.hustlibraco.com/2015/12/03/centos%E4%BD%BF%E7%94%A8yum%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEmongodb/</guid>
          <description>

&lt;h2 id=&#34;安装mongodb:10d8aa81d13021669fdcd5a46901e0c0&#34;&gt;安装Mongodb&lt;/h2&gt;

&lt;p&gt;使用Yum，我们可以很方便的安装Mongodb:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yum install mongodb mongodb-server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;yum会自动帮我们生成Mongodb的配置文件，其中最主要的配置文件&lt;code&gt;/etc/mongod.conf&lt;/code&gt;部分内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;# Comma separated list of ip addresses to listen on (all local ips by default)
bind_ip = 127.0.0.1

# Specify port number (27017 by default)
#port = 27017

# Fork server process (false by default)
fork = true

# Full path to pidfile (if not set, no pidfile is created)
pidfilepath = /var/run/mongodb/mongod.pid

# Log file to send write to instead of stdout - has to be a file, not directory
logpath = /var/log/mongodb/mongod.log

# Alternative directory for UNIX domain sockets (defaults to /tmp)
unixSocketPrefix = /var/run/mongodb

# Directory for datafiles (defaults to /data/db/)
dbpath = /var/lib/mongodb

# Enable/Disable journaling (journaling is on by default for 64 bit)
#journal = true
#nojournal = true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;默认配置指定了IP、端口、数据文件、日志文件等等，十分详尽，可以根据自己的实际情况进行修改，一般用默认的就行了。&lt;/p&gt;

&lt;h2 id=&#34;配置开机自启动:10d8aa81d13021669fdcd5a46901e0c0&#34;&gt;配置开机自启动&lt;/h2&gt;

&lt;p&gt;打开&lt;code&gt;/etc/rc.d/rc.local&lt;/code&gt;文件，追加&lt;code&gt;/usr/bin/mongod --config /etc/mongod.conf&lt;/code&gt;至行尾，保存即可。&lt;/p&gt;

&lt;h2 id=&#34;尝试启动:10d8aa81d13021669fdcd5a46901e0c0&#34;&gt;尝试启动&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;service mongod start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结果失败了，提示我使用指令&lt;code&gt;systemctl status mongodb&lt;/code&gt;查看原因，指令输出类似这样:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mongodb.service - High-performance, schema-free document-oriented database
        Loaded: loaded (/usr/lib/systemd/system/mongodb.service; enabled)
        Active: failed (Result: exit-code) since Mi 2013-04-03 15:48:01 EEST; 3min 13s ago
        Process: 1756 ExecStart=/usr/bin/mongod --quiet --config /etc/mongodb.conf (code=exited, status=14)

apr 03 15:48:01 echelon mongod[1756]: /usr/lib/libstdc++.so.6(_ZNSt6localeC1EPKc+0x71b) [0x7f60471c952b]
apr 03 15:48:01 echelon mongod[1756]: /usr/lib/libboost_filesystem.so.1.53.0(_ZN5boost10filesystem4path7codecvtEv+0x4f) [0x7f6047adfb6f]
apr 03 15:48:01 echelon mongod[1756]: /usr/lib/libboost_filesystem.so.1.53.0(_ZNK5boost10filesystem4path14root_directoryEv+0x114) [0x7f6047ae1344]
apr 03 15:48:01 echelon mongod[1756]: /usr/lib/libboost_filesystem.so.1.53.0(_ZN5boost10filesystem8absoluteERKNS0_4pathES3_+0x3e) [0x7f6047add16e]
apr 03 15:48:01 echelon mongod[1756]: /usr/bin/mongod(_ZN5mongo27initializeServerGlobalStateEb+0xf3) [0x94fc73]
apr 03 15:48:01 echelon mongod[1756]: /usr/bin/mongod(main+0x234) [0x7591f4]
apr 03 15:48:01 echelon mongod[1756]: /usr/lib/libc.so.6(__libc_start_main+0xf5) [0x7f60468b7a15]
apr 03 15:48:01 echelon mongod[1756]: /usr/bin/mongod() [0x76bcd5]
apr 03 15:48:01 echelon systemd[1]: mongodb.service: main process exited, code=exited, status=14/n/a
apr 03 15:48:01 echelon systemd[1]: Unit mongodb.service entered failed state
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;仍然看不出哪里有问题，直到google到了这样的字眼&lt;code&gt;sudo chown -R mongodb: /var/{lib,log}/mongodb&lt;/code&gt;，恍然大悟。&lt;/p&gt;

&lt;p&gt;使用Yum安装Mongodb会默认创建mongo用户：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mongodb:x:184:995:MongoDB Database Server:/var/lib/mongodb:/sbin/nologin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到该用户的家目录是&lt;code&gt;/var/lib/mongodb&lt;/code&gt;, 但是日志文件&lt;code&gt;/var/log/mongodb/mongod.log&lt;/code&gt;和进程ID文件&lt;code&gt;/var/run/mongodb/mongod.pid&lt;/code&gt;在其他的目录下面，这些目录属主不是mongodb用户，所以写入的时候会报权限问题。&lt;/p&gt;

&lt;p&gt;修改目录&lt;code&gt;/var/log/mongodb&lt;/code&gt;和&lt;code&gt;/var/run/mongodb&lt;/code&gt;属主为monodb即可。&lt;/p&gt;

&lt;h2 id=&#34;总结:10d8aa81d13021669fdcd5a46901e0c0&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;Yum安装软件十分简单，但是由于Mongodb的安装包忽略了权限问题，而且出错日志十分不明显，导致我花费数十分钟才解决。&lt;/p&gt;

&lt;p&gt;其实Linux下权限问题十分常见，发生问题不知道原因的时候都可以往这方面尝试一下。&lt;/p&gt;

&lt;h2 id=&#34;更新:10d8aa81d13021669fdcd5a46901e0c0&#34;&gt;更新&lt;/h2&gt;

&lt;p&gt;后来想了一下，应该不是安装包的问题，这问题未免也太低级了。&lt;/p&gt;

&lt;p&gt;极有可能是我安装好的时候使用自己的帐号运行过服务，所以产生的配置文件及目录的属主是我平常用的帐号，因此mongodb这个用户没有写入和执行权限。&lt;/p&gt;

&lt;p&gt;这里就不再去折腾重现了。马上开始下一个篇章：&lt;strong&gt;使用Mongodb！&lt;/strong&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Nginx配置多域名反向代理</title>
          <link>http://blog.hustlibraco.com/2015/12/03/nginx%E9%85%8D%E7%BD%AE%E5%A4%9A%E5%9F%9F%E5%90%8D%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</link>
          <pubDate>Thu, 03 Dec 2015 00:00:00 UTC</pubDate>
          <author>Libraco</author>
          <guid>http://blog.hustlibraco.com/2015/12/03/nginx%E9%85%8D%E7%BD%AE%E5%A4%9A%E5%9F%9F%E5%90%8D%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</guid>
          <description>

&lt;p&gt;Nginx是一款用C语言编写的高性能Web服务器，常常架设在其他Web服务的外层，用于负载均衡、缓存静态文件、反向代理等。&lt;/p&gt;

&lt;p&gt;所谓反向代理，就是部署在服务器端转发请求的代理服务，用户请求通过它到达真正的后端资源。与此对应的“正向”代理，是部署在客户端的代理服务，对外的网络请求实际由它发出。&lt;/p&gt;

&lt;p&gt;打个比方，正向代理就像是你叫你儿子帮你去打酱油，你儿子就是一个正向代理。反向代理就是你去酱油店买酱油，酱油实际上是老板找隔壁借来再卖给你，你并不知情，此时酱油店老板就是一个反向代理。&lt;/p&gt;

&lt;p&gt;从这个比方中也很好理解，正向代理对请求方是可知的，而反向代理对于请求方来说一般是透明的、不可知的。&lt;/p&gt;

&lt;h2 id=&#34;安装nginx:f5776ce002083f17f7a8f8f37568a092&#34;&gt;安装Nginx&lt;/h2&gt;

&lt;p&gt;使用Yum，我们可以很方便的安装Nginx(apt-get是完全类似的):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yum install nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;打开nginx的配置文件&lt;code&gt;/etc/nginx/nginx.conf&lt;/code&gt;，长这样:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/
#   * Official Russian Documentation: http://nginx.org/ru/docs/

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

events {
	worker_connections 1024;
}

http {
	log_format  main  &#39;$remote_addr - $remote_user [$time_local] &amp;quot;$request&amp;quot; &#39;
						&#39;$status $body_bytes_sent &amp;quot;$http_referer&amp;quot; &#39;
						&#39;&amp;quot;$http_user_agent&amp;quot; &amp;quot;$http_x_forwarded_for&amp;quot;&#39;;

	access_log  /var/log/nginx/access.log  main;

	sendfile            on;
	tcp_nopush          on;
	tcp_nodelay         on;
	keepalive_timeout   65;
	types_hash_max_size 2048;

	include             /etc/nginx/mime.types;
	default_type        application/octet-stream;

	# Load modular configuration files from the /etc/nginx/conf.d directory.
	# See http://nginx.org/en/docs/ngx_core_module.html#include
	# for more information.
	include /etc/nginx/conf.d/*.conf;

	server {
		listen       80 default_server;
		listen       [::]:80 default_server;
		server_name  _;
		root         /usr/share/nginx/html;

		# Load configuration files for the default server block.
		include /etc/nginx/default.d/*.conf;

		location / {
		}

		error_page 404 /404.html;
			location = /40x.html {
		}

		error_page 500 502 503 504 /50x.html;
			location = /50x.html {
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;大概可以知道nginx监听80端口，现在我们需要根据请求域名的不同代理到不同的后端服务。&lt;/p&gt;

&lt;h2 id=&#34;配置反向代理:f5776ce002083f17f7a8f8f37568a092&#34;&gt;配置反向代理&lt;/h2&gt;

&lt;p&gt;在&lt;code&gt;/etc/nginx/conf.d/&lt;/code&gt;目录下新建一个配置文件&lt;code&gt;reverse_proxy.conf&lt;/code&gt;，输入以下内容:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;upstream wx_server {
	server localhost:8001;
}

proxy_temp_path     /etc/nginx/proxy_temp;
proxy_cache_path    /etc/nginx/proxy_cache levels=1:2 keys_zone=cache_one:100m inactive=1d max_size=1g;

server {
	listen 80;
	server_name blog.hustlibraco.com hustlibraco.com;

	location ~ .*\.(gif|jpg|png|css|js|ico|swf)(.*) {
		proxy_pass http://localhost:8000;
		proxy_redirect off;
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

		proxy_cache cache_one;
		proxy_cache_valid 200 304 5m;
		proxy_cache_key $host$uri$is_args$args;
		expires 30d;
	}

	location / {
		proxy_pass http://localhost:8000;
		proxy_redirect off;
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	}
	access_log  /var/log/nginx/blog_hustlibraco_com_access.log;
}

server {
	listen 80;
	server_name wx.hustlibraco.com;
	location / {
		proxy_pass http://wx_server;
		proxy_redirect off;
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	}
	access_log  /var/log/nginx/wx_hustlibraco_com_access.log;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中两段server开头的配置指明了代理的规则，我们逐一解释下这些配置:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;listen 80&lt;/code&gt;   监听80端口&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;server_name blog.hustlibraco.com hustlibraco.com&lt;/code&gt;    接受这两个域名的请求&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;location ~ .*\.(gif|jpg|png|css|js|ico|swf)(.*){}&lt;/code&gt;   指定文件的缓存配置&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;location / {}&lt;/code&gt;   接受server_name下所有路径的请求&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;proxy_pass http://localhost:8000&lt;/code&gt;    转发到localhost的8000端口上&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;proxy_pass http://wx_server&lt;/code&gt; 转发到wx_server节点上，由upstream配置&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;proxy_redirect off&lt;/code&gt;  不重写被代理服务器返回给客户端的Location和Refresh&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;proxy_set_header Host $host&lt;/code&gt; 设置请求头的Host为反向代理服务器的Host&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;proxy_set_header X-Real-IP $remote_addr&lt;/code&gt; 设置请求头的X-Real-IP为客户端真实IP&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for&lt;/code&gt; 把请求来源的IP&lt;strong&gt;添加&lt;/strong&gt;到请求头的X-Forwarded-For字段&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;X-Forwarded-For:简称XFF头，它代表客户端，也就是HTTP的请求端真实的IP，只有在通过了HTTP代理或者负载均衡服务器时才会添加该项。
  它不是RFC中定义的标准请求头信息，在squid缓存代理服务器开发文档中可以找到该项的详细介绍。
  标准格式如下：X-Forwarded-For: client1, proxy1, proxy2。&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;access_log  /var/log/nginx/blog_hustlibraco_com_access.log&lt;/code&gt;  请求日志文件&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;了解这些配置项的意义之后，可以知道发送给&lt;code&gt;blog.hustlibraco.com&lt;/code&gt;, &lt;code&gt;hustlibraco.com&lt;/code&gt;的请求都会被转发到本地8000服务上，而发送给&lt;code&gt;wx.hustlibraco.com&lt;/code&gt;的请求被转发到wx_server节点上（&lt;code&gt;localhost:8001&lt;/code&gt;）。&lt;/p&gt;

&lt;p&gt;配置好以后使用命令&lt;code&gt;service nginx reload&lt;/code&gt;使配置生效。&lt;/p&gt;

&lt;h2 id=&#34;设置开机自启动:f5776ce002083f17f7a8f8f37568a092&#34;&gt;设置开机自启动&lt;/h2&gt;

&lt;p&gt;CentOS7引入了&lt;code&gt;systemctl&lt;/code&gt;命令，结合了service和chkconfig的功能，一行命令设设置开机自启动:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;systemctl enable nginx.service
ln -s &#39;/usr/lib/systemd/system/nginx.service&#39; &#39;/etc/systemd/system/multi-user.target.wants/nginx.service&#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
      
    

  </channel>
</rss>
