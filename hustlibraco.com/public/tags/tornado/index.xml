<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Whisper </title>
    <link>http://blog.hustlibraco.com/tags/tornado/</link>
    <language>en-us</language>
    <author>Libraco</author>
    <rights>(C) 2015</rights>
    <updated>2015-12-09 00:00:00 &#43;0000 UTC</updated>

    
      
        <item>
          <title>利用Supervisor部署多个Tornado服务</title>
          <link>http://blog.hustlibraco.com/2015/12/09/%E5%88%A9%E7%94%A8supervisor%E9%83%A8%E7%BD%B2%E5%A4%9A%E4%B8%AAtornado%E6%9C%8D%E5%8A%A1/</link>
          <pubDate>Wed, 09 Dec 2015 00:00:00 UTC</pubDate>
          <author>Libraco</author>
          <guid>http://blog.hustlibraco.com/2015/12/09/%E5%88%A9%E7%94%A8supervisor%E9%83%A8%E7%BD%B2%E5%A4%9A%E4%B8%AAtornado%E6%9C%8D%E5%8A%A1/</guid>
          <description>

&lt;p&gt;单个Tornado服务由于文件句柄和处理请求数的限制不能够很好得满足实际的工作需求，因此我们搭建多个实例共同服务，但是Tornado自身没有这样的集群管理能力，所以我们需要借助第三方工具——Supervisor。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://supervisord.org/&#34;&gt;Supervisor&lt;/a&gt; 是用Python编写的运行在Linux上的进程控制系统，用于监控和管理批量的服务进程，当前版本3.2.0。&lt;/p&gt;

&lt;h2 id=&#34;安装supervisor:ae9997a2769c75053f068259cadd520a&#34;&gt;安装Supervisor&lt;/h2&gt;

&lt;p&gt;官网上介绍了多种安装方法，这里使用pip进行安装:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install supervisor
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装完毕之后在&lt;code&gt;/usr/bin&lt;/code&gt;目录会生成一个&lt;code&gt;echo_supervisord_conf&lt;/code&gt;文件，它的作用是打印默认的Supervisor配置。接下来我们执行:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo_supervisord_conf &amp;gt; /etc/supervisord.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样我们的配置文件就建立好了，最好不要改配置文件的路径和名字，因为Supervisor命令默认读取此路径配置，以后使用起来更方便。针对单独服务的配置可以写在任意地方，只要在主配置文件中包含进来就可以。&lt;/p&gt;

&lt;p&gt;包含格式在默认配置文件的最后一行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;; The [include] section can just contain the &amp;quot;files&amp;quot; setting.  This
; setting can list multiple files (separated by whitespace or
; newlines).  It can also contain wildcards.  The filenames are
; interpreted as relative to this file.  Included files *cannot*
; include files themselves.

[include]
files = /etc/supervisor/conf.d/*.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里会包含&lt;code&gt;/etc/supervisor/conf.d/&lt;/code&gt;下所有以&lt;code&gt;.conf&lt;/code&gt;结尾的文件，记得删除行首的分号注释符。&lt;/p&gt;

&lt;h2 id=&#34;针对tornado的supervisor配置:ae9997a2769c75053f068259cadd520a&#34;&gt;针对Tornado的Supervisor配置&lt;/h2&gt;

&lt;p&gt;Supervisor关于监控对象的详细配置可以参考其&lt;a href=&#34;http://supervisord.org/configuration.html#program-x-section-values&#34;&gt;官网&lt;/a&gt;，这里我们给一个具体例子:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[group:tornadoes]
programs=tornado-8000,tornado-8001,tornado-8002,tornado-8003

[program:tornado-8000]
command=python /var/www/main.py --port=8000 --log_file_prefix=/var/log/tornado/tornado-8000.log
directory=/var/www
user=www-data
autorestart=true
redirect_stderr=true
loglevel=info

[program:tornado-8001]
command=python /var/www/main.py --port=8001 --log_file_prefix=/var/log/tornado/tornado-8000.log
directory=/var/www
user=www-data
autorestart=true
redirect_stderr=true
loglevel=info

[program:tornado-8002]
command=python /var/www/main.py --port=8002 --log_file_prefix=/var/log/tornado/tornado-8000.log
directory=/var/www
user=www-data
autorestart=true
redirect_stderr=true

loglevel=info

[program:tornado-8003]
command=python /var/www/main.py --port=8003 --log_file_prefix=/var/log/tornado/tornado-8000.log
directory=/var/www
user=www-data
autorestart=true
redirect_stderr=true
loglevel=info
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里我们定义了一个名为&lt;code&gt;tornadoes&lt;/code&gt;的组，包含四个成员&lt;code&gt;tornado-8000&lt;/code&gt;、&lt;code&gt;tornado-8001&lt;/code&gt;、&lt;code&gt;tornado-8002&lt;/code&gt;、&lt;code&gt;tornado-8003&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;program部分定义了Supervisor将要运行的每个命令的参数。&lt;/p&gt;

&lt;p&gt;command的值是必须的，通常是带有我们希望监听的带有port参数的Tornado应用。&lt;/p&gt;

&lt;p&gt;我们还为每个程序的工作目录、有效用户和日志文件定义了额外的设置。&lt;/p&gt;

&lt;p&gt;autorestart=true保证进程在异常情况下会自动重启，而redirect_stderr=true会把标准错误重定向到标准输出。&lt;/p&gt;

&lt;p&gt;至此我们的配置工作基本完成。&lt;/p&gt;

&lt;h2 id=&#34;启动supervisord:ae9997a2769c75053f068259cadd520a&#34;&gt;启动Supervisord&lt;/h2&gt;

&lt;p&gt;直接在Bash中执行&lt;code&gt;supervisord&lt;/code&gt;即可，如果需要指定配置文件，使用-c参数。此时四个Tornado服务已经跑起来了。&lt;/p&gt;

&lt;h2 id=&#34;管理服务:ae9997a2769c75053f068259cadd520a&#34;&gt;管理服务&lt;/h2&gt;

&lt;p&gt;管理服务需要用到&lt;code&gt;supervisorctl&lt;/code&gt;命令，这个命令必须在Supervisord启动之后执行，它通过发送指令给Supervisord达到管理的目的。&lt;/p&gt;

&lt;p&gt;常用的指令有：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;supervisorctl reload&lt;/code&gt; 重启Supervisord服务&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;supervisorctl restart &amp;lt;name&amp;gt;|&amp;lt;gname&amp;gt;&lt;/code&gt; 重启某个服务或某一组服务&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;supervisorctl status&lt;/code&gt; 查看服务运行的状态和时间&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;其他:ae9997a2769c75053f068259cadd520a&#34;&gt;其他&lt;/h2&gt;

&lt;p&gt;如果Tornado集群部署在Nginx反向代理之后，要获取到远程真实IP，除了必要的Nginx配置之外，Tornado也需要明确指定&lt;code&gt;xheaders=True&lt;/code&gt;,官方有说明：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If xheaders is True, we support the X-Real-Ip/X-Forwarded-For and X-Scheme/X-Forwarded-Proto headers, which override the remote IP and URI scheme/protocol for all requests.
These headers are useful when running Tornado behind a reverse proxy or load balancer.
The protocol argument can also be set to https if Tornado is run behind an SSL-decoding proxy that does not set one of the supported xheaders.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;具体代码示例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;application = tornado.web.Application([
    (r&amp;quot;/&amp;quot;, MainHandler),
])
application.listen(options.port, &#39;127.0.0.1&#39;, xheaders=True)
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
      
    

  </channel>
</rss>
