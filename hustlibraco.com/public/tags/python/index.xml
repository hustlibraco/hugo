<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Whisper </title>
    <link>http://blog.hustlibraco.com/tags/python/</link>
    <language>en-us</language>
    <author>Libraco</author>
    <rights>(C) 2015</rights>
    <updated>2015-12-09 00:00:00 &#43;0000 UTC</updated>

    
      
        <item>
          <title>Python实现RSA的几种方案</title>
          <link>http://blog.hustlibraco.com/2015/12/09/python%E5%AE%9E%E7%8E%B0rsa%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%A1%88/</link>
          <pubDate>Wed, 09 Dec 2015 00:00:00 UTC</pubDate>
          <author>Libraco</author>
          <guid>http://blog.hustlibraco.com/2015/12/09/python%E5%AE%9E%E7%8E%B0rsa%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%A1%88/</guid>
          <description>

&lt;h2 id=&#34;rsa-https-pypi-python-org-pypi-rsa:e7fd8297e2196d1a566a3e2e51cbb23a&#34;&gt;&lt;a href=&#34;https://pypi.python.org/pypi/rsa&#34;&gt;rsa&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;这是一个纯python实现的库，不依赖底层文件，优点是部署容易，缺点是速度比较慢，原本是斯坦福大学教学演示用的，现在由Sybren A. Stüvel专人维护。
生产环境不太建议使用此库。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;解密性能: 70ms左右&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Python-RSA is a pure-Python RSA implementation. It supports encryption and decryption, signing and verifying signatures, and key generation according to PKCS#1 version 1.5. It can be used as a Python library as well as on the commandline. The code was mostly written by Sybren A. Stüvel.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;pycrypto-https-pypi-python-org-pypi-pycrypto:e7fd8297e2196d1a566a3e2e51cbb23a&#34;&gt;&lt;a href=&#34;https://pypi.python.org/pypi/pycrypto&#34;&gt;pycrypto&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;这个库应用的比较多，不局限于rsa，实现了大多数常用的加密算法。底层应该也是自己实现的，因为相比后面一个调用系统模块的库它的rsa算法要慢很多。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;解密性能: 40ms左右&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is a collection of both secure hash functions (such as SHA256 and RIPEMD160), and various encryption algorithms (AES, DES, RSA, ElGamal, etc.). The package is structured to make adding new modules easy. This section is essentially complete, and the software interface will almost certainly not change in an incompatible way in the future; all that remains to be done is to fix any bugs that show up. If you encounter a bug, please report it in the Launchpad bug tracker at&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;m2crypto-https-pypi-python-org-pypi-m2crypto:e7fd8297e2196d1a566a3e2e51cbb23a&#34;&gt;&lt;a href=&#34;https://pypi.python.org/pypi/M2Crypto&#34;&gt;M2Crypto&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;这个库是对Openssl库接口的python封装，实际运算都是调用系统的libssl.so/libcryto.so，不过安装的时候比较麻烦，需要依赖swig等工具。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gitlab.com/m2crypto/m2crypto_demo&#34;&gt;demo戳这里&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;解密性能: 7ms左右&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;ctypes-openssl:e7fd8297e2196d1a566a3e2e51cbb23a&#34;&gt;ctypes+openssl&lt;/h2&gt;

&lt;p&gt;以上列举的几种方法都有一个问题，就是不能利用多核。当我调用解密接口比较集中的时候，接口耗时会成倍增加，即便是最快的M2Crypto，瞬时10个并发的时候最坏情况就会达到70ms左右。&lt;/p&gt;

&lt;p&gt;因此我尝试直接使用ctypes调用openssl库突破的GIL的限制，不过ctypes调用so文件有点麻烦的就是看不到so提供的函数名，反复查阅openssl的文档和参考c代码之后，最终调试成功。结果也非常令人满意，达到了1ms级，瞬时100个并发也能维持在毫秒级的性能。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;解密性能: 1ms左右&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;demo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import ctypes
from ctypes.util import find_library
_libcrypto = find_library(&#39;crypto&#39;)
sign = &#39;iYzF0bn6kwUtsqLmTSx8fx...&#39;
cryptor = ctypes.cdll.LoadLibrary(_libcrypto)
RSA_size                    = cryptor.RSA_size
BIO_free                    = cryptor.BIO_free
RSA_free                    = cryptor.RSA_free
RSA_decrypt                 = cryptor.RSA_private_decrypt
PEM_read_bio_RSAPrivateKey  = cryptor.PEM_read_bio_RSAPrivateKey
privkey = &#39;&#39;&#39;-----BEGIN RSA PRIVATE KEY-----...-----END RSA PRIVATE KEY-----&#39;&#39;&#39;    
bio = cryptor.BIO_new_mem_buf(privkey, -1)
key = PEM_read_bio_RSAPrivateKey(bio, 0, 0, 0)
r = BIO_free(bio)
if r != 1:
    # break here
    print &#39;BIO_free error&#39;
    return
rsa_size = RSA_size(key)
rsa = ctypes.create_string_buffer(rsa_size)
ret = RSA_decrypt(rsa_size, sign, rsa, key, 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中privkey是私钥，sign是我要解密的数据。&lt;/p&gt;

&lt;h2 id=&#34;总结:e7fd8297e2196d1a566a3e2e51cbb23a&#34;&gt;总结&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;加解密这一块，Linux下面能用openssl就用openssl，绝对比自己实现快。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;python+ctypes可以让你享受python便利的同时还能拥有卓越的性能，不过ctypes创建的内存空间记得要自己释放，python垃圾收集机制对其无效。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;一般情况下推荐用pycrypto库，文档比较全面。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
      
    
      
        <item>
          <title>利用Supervisor部署多个Tornado服务</title>
          <link>http://blog.hustlibraco.com/2015/12/09/%E5%88%A9%E7%94%A8supervisor%E9%83%A8%E7%BD%B2%E5%A4%9A%E4%B8%AAtornado%E6%9C%8D%E5%8A%A1/</link>
          <pubDate>Wed, 09 Dec 2015 00:00:00 UTC</pubDate>
          <author>Libraco</author>
          <guid>http://blog.hustlibraco.com/2015/12/09/%E5%88%A9%E7%94%A8supervisor%E9%83%A8%E7%BD%B2%E5%A4%9A%E4%B8%AAtornado%E6%9C%8D%E5%8A%A1/</guid>
          <description>

&lt;p&gt;单个Tornado服务由于文件句柄和处理请求数的限制不能够很好得满足实际的工作需求，因此我们搭建多个实例共同服务，但是Tornado自身没有这样的集群管理能力，所以我们需要借助第三方工具——Supervisor。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://supervisord.org/&#34;&gt;Supervisor&lt;/a&gt; 是用Python编写的运行在Linux上的进程控制系统，用于监控和管理批量的服务进程，当前版本3.2.0。&lt;/p&gt;

&lt;h2 id=&#34;安装supervisor:ae9997a2769c75053f068259cadd520a&#34;&gt;安装Supervisor&lt;/h2&gt;

&lt;p&gt;官网上介绍了多种安装方法，这里使用pip进行安装:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install supervisor
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装完毕之后在&lt;code&gt;/usr/bin&lt;/code&gt;目录会生成一个&lt;code&gt;echo_supervisord_conf&lt;/code&gt;文件，它的作用是打印默认的Supervisor配置。接下来我们执行:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo_supervisord_conf &amp;gt; /etc/supervisord.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样我们的配置文件就建立好了，最好不要改配置文件的路径和名字，因为Supervisor命令默认读取此路径配置，以后使用起来更方便。针对单独服务的配置可以写在任意地方，只要在主配置文件中包含进来就可以。&lt;/p&gt;

&lt;p&gt;包含格式在默认配置文件的最后一行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;; The [include] section can just contain the &amp;quot;files&amp;quot; setting.  This
; setting can list multiple files (separated by whitespace or
; newlines).  It can also contain wildcards.  The filenames are
; interpreted as relative to this file.  Included files *cannot*
; include files themselves.

[include]
files = /etc/supervisor/conf.d/*.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里会包含&lt;code&gt;/etc/supervisor/conf.d/&lt;/code&gt;下所有以&lt;code&gt;.conf&lt;/code&gt;结尾的文件，记得删除行首的分号注释符。&lt;/p&gt;

&lt;h2 id=&#34;针对tornado的supervisor配置:ae9997a2769c75053f068259cadd520a&#34;&gt;针对Tornado的Supervisor配置&lt;/h2&gt;

&lt;p&gt;Supervisor关于监控对象的详细配置可以参考其&lt;a href=&#34;http://supervisord.org/configuration.html#program-x-section-values&#34;&gt;官网&lt;/a&gt;，这里我们给一个具体例子:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[group:tornadoes]
programs=tornado-8000,tornado-8001,tornado-8002,tornado-8003

[program:tornado-8000]
command=python /var/www/main.py --port=8000 --log_file_prefix=/var/log/tornado/tornado-8000.log
directory=/var/www
user=www-data
autorestart=true
redirect_stderr=true
loglevel=info

[program:tornado-8001]
command=python /var/www/main.py --port=8001 --log_file_prefix=/var/log/tornado/tornado-8000.log
directory=/var/www
user=www-data
autorestart=true
redirect_stderr=true
loglevel=info

[program:tornado-8002]
command=python /var/www/main.py --port=8002 --log_file_prefix=/var/log/tornado/tornado-8000.log
directory=/var/www
user=www-data
autorestart=true
redirect_stderr=true

loglevel=info

[program:tornado-8003]
command=python /var/www/main.py --port=8003 --log_file_prefix=/var/log/tornado/tornado-8000.log
directory=/var/www
user=www-data
autorestart=true
redirect_stderr=true
loglevel=info
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里我们定义了一个名为&lt;code&gt;tornadoes&lt;/code&gt;的组，包含四个成员&lt;code&gt;tornado-8000&lt;/code&gt;、&lt;code&gt;tornado-8001&lt;/code&gt;、&lt;code&gt;tornado-8002&lt;/code&gt;、&lt;code&gt;tornado-8003&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;program部分定义了Supervisor将要运行的每个命令的参数。&lt;/p&gt;

&lt;p&gt;command的值是必须的，通常是带有我们希望监听的带有port参数的Tornado应用。&lt;/p&gt;

&lt;p&gt;我们还为每个程序的工作目录、有效用户和日志文件定义了额外的设置。&lt;/p&gt;

&lt;p&gt;autorestart=true保证进程在异常情况下会自动重启，而redirect_stderr=true会把标准错误重定向到标准输出。&lt;/p&gt;

&lt;p&gt;至此我们的配置工作基本完成。&lt;/p&gt;

&lt;h2 id=&#34;启动supervisord:ae9997a2769c75053f068259cadd520a&#34;&gt;启动Supervisord&lt;/h2&gt;

&lt;p&gt;直接在Bash中执行&lt;code&gt;supervisord&lt;/code&gt;即可，如果需要指定配置文件，使用-c参数。此时四个Tornado服务已经跑起来了。&lt;/p&gt;

&lt;h2 id=&#34;管理服务:ae9997a2769c75053f068259cadd520a&#34;&gt;管理服务&lt;/h2&gt;

&lt;p&gt;管理服务需要用到&lt;code&gt;supervisorctl&lt;/code&gt;命令，这个命令必须在Supervisord启动之后执行，它通过发送指令给Supervisord达到管理的目的。&lt;/p&gt;

&lt;p&gt;常用的指令有：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;supervisorctl reload&lt;/code&gt; 重启Supervisord服务&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;supervisorctl restart &amp;lt;name&amp;gt;|&amp;lt;gname&amp;gt;&lt;/code&gt; 重启某个服务或某一组服务&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;supervisorctl status&lt;/code&gt; 查看服务运行的状态和时间&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;其他:ae9997a2769c75053f068259cadd520a&#34;&gt;其他&lt;/h2&gt;

&lt;p&gt;如果Tornado集群部署在Nginx反向代理之后，要获取到远程真实IP，除了必要的Nginx配置之外，Tornado也需要明确指定&lt;code&gt;xheaders=True&lt;/code&gt;,官方有说明：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If xheaders is True, we support the X-Real-Ip/X-Forwarded-For and X-Scheme/X-Forwarded-Proto headers, which override the remote IP and URI scheme/protocol for all requests.
These headers are useful when running Tornado behind a reverse proxy or load balancer.
The protocol argument can also be set to https if Tornado is run behind an SSL-decoding proxy that does not set one of the supported xheaders.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;具体代码示例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;application = tornado.web.Application([
    (r&amp;quot;/&amp;quot;, MainHandler),
])
application.listen(options.port, &#39;127.0.0.1&#39;, xheaders=True)
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
      
    

  </channel>
</rss>
